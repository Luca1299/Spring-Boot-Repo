package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/user") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/users")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/findUserByName/{name}")
    public @ResponseBody List<User> findUserByName (@PathVariable(name = "name") String name) {

        return userRepository.findUserByName(name);
    }

    @GetMapping(path="/findUserByNameIgnoreCase/{name}")
    public @ResponseBody List<User> findUserByNameIgnoreCase (@PathVariable(name = "name") String name) {

        return userRepository.findUserByNameIgnoreCase(name);
    }

    @GetMapping(path="/find/{name}")
    public @ResponseBody List<User> findUserByNameContainingIgnoreCase (@PathVariable(name = "name") String name) {

        return userRepository.findUserByNameContainingIgnoreCase(name);
    }

    @GetMapping(path="/findById")
    public @ResponseBody User findById (@RequestParam Integer id) {

        return userRepository.findById(id).orElseThrow(
                () -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Utente non trovato")
        );
    }

    @GetMapping(path="/delete")
    public @ResponseBody String deleteUserById (@RequestParam Integer id) {

        if (userRepository.existsById(id)) {
            try {
                userRepository.deleteById(id);
                return "User deleted";
            } catch (IllegalArgumentException e) {
                System.out.println("Exception" + e);
            }
        }
        return "User doesn't exists";
    }

}